// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String  @unique @default(uuid())
  userId        String  @unique
  user_name     String
  official_name String
  imageURL      String
  email         String  @unique
  phone_no      String?
  bio           String?
  emoje         String?

  genderId String?
  gender   Gender? @relation(fields: [genderId], references: [id])

  threads Threads[]

  followers Follows[] @relation("following")
  following Follows[] @relation("follower")

  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Gender {
  id   String @unique @default(uuid())
  type String @unique
  user User[]
}

model Follows {
  id String @unique @default(uuid())

  followerId String
  follower   User   @relation("follower", fields: [followerId], references: [id])

  followingId String
  following   User   @relation("following", fields: [followingId], references: [id])

  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Threads {
  id          String  @unique @default(uuid())
  userId      String
  assert      String
  description String? @db.Text
  threadUrl   String  @unique

  likes    Likes[]
  commands Commands[]

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  like_count BigInt @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Likes {
  id String @unique @default(uuid())

  threadId String
  thread   Threads @relation(fields: [threadId], references: [id], onDelete: Cascade)

  createAt DateTime @default(now())

  @@unique([threadId])
  @@index([threadId])
}

model Commands {
  id      String @unique @default(uuid())
  command String @db.Text

  threadId String
  thread   Threads @relation(fields: [threadId], references: [id], onDelete: Cascade)

  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([threadId])
  @@index([threadId])
}
